(add-to-load-path (dirname (current-filename)))

(use-modules (gnu) (guix) (guix packages) (srfi srfi-1) (my-variables))
(use-service-modules linux mcron networking shepherd ssh virtualization)
(use-package-modules certs file-systems linux)

(define my-kernel linux-libre-5.15) ;;                change to latest LTS version : https://www.kernel.org/category/releases.html

(define my-zfs
  (package
    (inherit zfs)
    (arguments
      (cons* #:linux my-kernel
             (package-arguments zfs)))))
(define zfs-shepherd-services
  (let ((zpool            (file-append my-zfs "/sbin/zpool"))
        (zfs              (file-append my-zfs "/sbin/zfs"))
        (scheme-modules   `((srfi srfi-1)
                            (srfi srfi-34)
                            (srfi srfi-35)
                            (rnrs io ports)
                            ,@%default-modules)))
    (define zfs-scan
      (shepherd-service
        (provision '(zfs-scan))
        (documentation "Scans for ZFS pools.")
        (requirement '(kernel-module-loader udev))
        (modules scheme-modules)
        (start #~(lambda _
                   (invoke/quiet #$zpool "import" "-a" "-N")))
        (stop #~(const #f))))
    (define zfs-automount
      (shepherd-service
        (provision '(zfs-automount))
        (documentation "Automounts ZFS data sets.")
        (requirement '(zfs-scan))
        (modules scheme-modules)
        (start #~(lambda _
                   (with-output-to-port
                     (current-error-port)
                     (lambda ()
                       (invoke #$zfs "mount" "-a" "-l")))))
        (stop #~(lambda _
                  (chdir "/")
                  (invoke/quiet #$zfs "unmount" "-a" "-f")
                  #f))))
    (list zfs-scan
          zfs-automount)))

(operating-system
  (locale "en_US.utf8")
  (timezone "America/New_York")
  (keyboard-layout (keyboard-layout "us"))
  (host-name "node1")
  (users (cons* (user-account
                  (name "vm")
                  (comment "Virtual Manager")
                  (group "users")
                  (home-directory "/home/vm")
                  (supplementary-groups
                    '("wheel" "netdev" "kvm")))
                %base-user-accounts))
  (bootloader
    (bootloader-configuration
      (bootloader grub-efi-bootloader)
      (target "/boot/efi")
      (keyboard-layout keyboard-layout)))
  (mapped-devices
    (list (mapped-device
            (source
              (uuid "31a5b79e-3e86-4d9b-9637-8e114e7cc30b"))
            (target "cryptroot")
            (type luks-device-mapping))))
  (file-systems
    (cons* (file-system
             (mount-point "/")
             (device "/dev/mapper/cryptroot")
             (type "btrfs")
             (dependencies mapped-devices))
           (file-system
             (mount-point "/boot/efi")
             (device (uuid "89FD-BE66" 'fat32))
             (type "vfat"))
           %base-file-systems))
  (packages
    (append
      (list
      my-zfs)
  my-packages))
  (services
    (append
      (list (service openssh-service-type)
            (service network-manager-service-type)
            (service libvirt-service-type)
            (service wpa-supplicant-service-type)
            (simple-service
              'zfs-loader
              kernel-module-loader-service-type
              '("zfs"))
            ; This adds the above services to your bootup,
            ; so that ZFS filesystems get mounted at boot.
            (simple-service
              'zfs-shepherd-services
              shepherd-root-service-type
              zfs-shepherd-services)
            ; This ensures most daemons are started after
            ; ZFS filesystems get mounted.
            (simple-service
              'zfs-shepherd-services-user-processes
              user-processes-service-type
              '(zfs-automount)))
      %base-services))

(kernel my-kernel)
; This *installs* ZFS into your kernel.
(kernel-loadable-modules (list
                          (list my-zfs "module"))))
                          

(operating-system
  (host-name "network")
  (timezone "Etc/UTC")
  (locale "en_US.utf8")
  (keyboard-layout (keyboard-layout "us"))

  ;; Label for the GRUB boot menu.
  (label (string-append "GNU Guix " (package-version guix)))

  (firmware '())

  (bootloader (bootloader-configuration
               (bootloader grub-bootloader)
               (targets "/dev/vda")
               (terminal-outputs '(console))))
  (file-systems (cons (file-system
                        (mount-point "/")
                        (device "/dev/mapper/cryptroot")
                        (type "bcachefs"))
                      %base-file-systems))

  (users (cons (user-account
                (name "route")
                (comment "routing")
                (password "")
                (group "users")
                (supplementary-groups '("wheel" "netdev")))
               %base-user-accounts))

  (packages (append (list font-bitstream-vera nss-certs nvi wget)
                    %base-packages))

                 ;; Choose SLiM, which is lighter than the default GDM.
                 (service slim-service-type
                          (slim-configuration
                           (auto-login? #t)
                           (default-user "guest")
                           (xorg-configuration
                            (xorg-configuration
                             ;; The QXL virtual GPU driver is added to provide
                             ;; a better SPICE experience.
                             (modules (cons xf86-video-qxl
                                            %default-xorg-modules))
                             (keyboard-layout keyboard-layout)))))

                 ;; Uncomment the line below to add an SSH server.
                 ;;(service openssh-service-type)

                 ;; Add support for the SPICE protocol, which enables dynamic
                 ;; resizing of the guest screen resolution, clipboard
                 ;; integration with the host, etc.
                 (service spice-vdagent-service-type)

                 (simple-service 'cron-jobs mcron-service-type
                                 (list auto-update-resolution-crutch))

                 ;; Use the DHCP client service rather than NetworkManager.
                 (service dhcp-client-service-type))

           ;; Remove GDM, ModemManager, NetworkManager, and wpa-supplicant,
           ;; which don't make sense in a VM.
           (remove (lambda (service)
                     (let ((type (service-kind service)))
                       (or (memq type
                                 (list gdm-service-type
                                       wpa-supplicant-service-type
                                       cups-pk-helper-service-type
                                       network-manager-service-type
                                       modem-manager-service-type))
                           (eq? 'network-manager-applet
                                (service-type-name type)))))
                   (modify-services %desktop-services
                     (login-service-type config =>
                                         (login-configuration
                                          (inherit config)
                                          (motd vm-image-motd)))))))

  ;; Allow resolution of '.local' host names with mDNS.
  (name-service-switch %mdns-host-lookup-nss))







           ;; Static networking for one NIC, IPv4-only.
         (service static-networking-service-type
                  (list (static-networking
                         (addresses
                          (list (network-address
                                 (device "eno1")
                                 (value "10.0.2.15/24"))))
                         (routes
                          (list (network-route
                                 (destination "default")
                                 (gateway "10.0.2.2"))))
                         (name-servers '("10.0.2.3")))))


;; Todo 

;; Mac randomizer with network Manager on dev and phone
;; unatended upgrade : add guix home reconfigure
;; Unatended upgrade user : guix pull && guix upgrade && guix home reconfigure
;; rtorrent service file